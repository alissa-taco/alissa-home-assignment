import { IRouter, RequestHandler as ExpressRequestHandler, ErrorRequestHandler } from 'express';
import { HttpSchema, Method } from '../shared';
import { Paths } from '../util';
import { RequestHandler } from './create-request-handler';
import { ZodType, ZodTypeAny } from 'zod';
/** Options for decorateExpressRouter. */
export interface DecorateExpressRouterOptions<Schema extends HttpSchema, App extends IRouter, ReqProps extends ZodTypeAny> {
    /** Type schema describing the endpoints handled by the express server. */
    schema: Schema;
    /** Express app or router. Default value is `express.Router()`. */
    router?: App;
    /** TODO: doc... */
    requestProps?: ReqProps;
    /**
     * Optional request handler to delegate to if a server-side validation error occurs. If this option is not
     * specified, the default behaviour is to respond with a 400 status code.
     */
    onValidationError?: ErrorRequestHandler;
}
/**
 * Returns a decorated copy of the given express application or router, with strongly-typed `get`/`post` methods
 * and runtime validation checks on request/response bodies. The given app/router is not modified.
 */
export declare function decorateExpressRouter<Schema extends HttpSchema, App extends IRouter, ReqProps extends ZodTypeAny = ZodType<{}>>(options: DecorateExpressRouterOptions<Schema, App, ReqProps>): DecoratedExpressRouter<Schema, App, ReqProps>;
/** A strongly-typed express application/router. */
export declare type DecoratedExpressRouter<S extends HttpSchema, R extends IRouter, ReqProps extends ZodTypeAny> = ExpressRequestHandler & Omit<R, Lowercase<Method>> & {
    [M in Method as Lowercase<M>]: <P extends Paths<S, M>>(path: P, ...handlers: Array<RequestHandler<S, M, P, ReqProps['_output']> | Array<ExpressRequestHandler | ErrorRequestHandler>>) => void;
};
