"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHttpSchema = void 0;
const pathToRegExp = require("path-to-regexp");
const z = require("zod");
const methods_1 = require("./methods");
/**
 * Creates a HttpSchema object from the given route specifications.
 * HTTP schemas may be passed to `createHttpClient` and/or `decorateExpressServer` to implement the schema on the
 * client-side and/or server-side. See those functions for more details.
 */
function createHttpSchema(routeSpecs) {
    var _a, _b;
    // Extract and validate route info for each route specified in the schema.
    const schema = {};
    let route;
    for (route in routeSpecs) {
        // Extract and validate the method and path.
        const parts = route.split(' ');
        if (parts.length !== 2)
            throw new Error(`Route must be specified using the format '{METHOD} {PATH}'`);
        const [method, path] = parts;
        if (!methods_1.methods.includes(method))
            throw new Error(`Unsupported method '${method}'. Expected one of: ${methods_1.methods.join(', ')}`);
        // Extract the named params.
        // NB: pathToRegExp doesn't handle '*' wildcards like express, so we replace those with (.*) in the path.
        let pathParams = pathToRegExp
            .parse(path.replace(/\*/g, '(.*)'))
            .filter((p) => typeof p !== 'string');
        if (pathParams.some((p) => p.optional || p.repeat))
            throw new Error(`Optional/repeated parameters are not supported`);
        let namedParams = pathParams.map((p) => String(p.name));
        // Extract the req/res body shapes.
        const requestBody = (_a = routeSpecs[route].requestBody) !== null && _a !== void 0 ? _a : z.unknown();
        const responseBody = (_b = routeSpecs[route].responseBody) !== null && _b !== void 0 ? _b : z.unknown();
        schema[route] = {
            method: method,
            path,
            namedParams,
            requestBody,
            responseBody,
        };
    }
    return schema;
}
exports.createHttpSchema = createHttpSchema;
//# sourceMappingURL=create-http-schema.js.map