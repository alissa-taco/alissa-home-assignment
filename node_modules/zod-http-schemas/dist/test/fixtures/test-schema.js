"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testGetOnlySchema = exports.testSchema = void 0;
const shared_1 = require("../../shared");
const customValidationErrorResponse = shared_1.z.object({
    success: shared_1.z.literal(false),
    code: shared_1.z.literal('MY_CUSTOM_VALIDATION_ERROR'),
});
exports.testSchema = (0, shared_1.createHttpSchema)({
    'GET /random-numbers': {
        responseBody: shared_1.z.array(shared_1.z.number()),
    },
    'POST /sum': {
        requestBody: shared_1.z.array(shared_1.z.number()),
        responseBody: shared_1.z.number().or(customValidationErrorResponse),
    },
    'POST /product': {
        requestBody: shared_1.z.array(shared_1.z.number()),
        responseBody: shared_1.z.number(),
    },
    'GET *': {
        requestBody: shared_1.z.object({
            name: shared_1.z.string(),
        }),
        responseBody: shared_1.z.unknown(),
    },
    'GET /404': {
        responseBody: shared_1.z.object({ error: shared_1.z.string() }),
    },
    'PUT /multiply': {
        requestBody: shared_1.z.object({ first: shared_1.z.number(), second: shared_1.z.number() }),
        responseBody: shared_1.z.number(),
    },
    'POST /sum/negative': {
        requestBody: shared_1.z.array(shared_1.z.number().int().negative()),
        responseBody: shared_1.z.number().negative().int().or(customValidationErrorResponse),
    },
    'POST /sum/negative-broken': {
        requestBody: shared_1.z.array(shared_1.z.number().int().negative()),
        responseBody: shared_1.z.number().negative().int(),
    },
    'POST /sum/transform-string': {
        requestBody: shared_1.z.array(shared_1.z.string().transform((s) => parseInt(s, 10))),
        responseBody: shared_1.z.number().int(),
    },
    'POST /sum/transform-response': {
        requestBody: shared_1.z.array(shared_1.z.number().int()),
        responseBody: shared_1.z
            .number()
            .int()
            .transform((s) => s.toString()),
    },
    'POST /sum/with-query-param': {
        requestBody: shared_1.z.array(shared_1.z.number().int()),
        responseBody: shared_1.z
            .number()
            .int(),
    },
});
// Used for testing get request without json body parser
exports.testGetOnlySchema = (0, shared_1.createHttpSchema)({
    'GET /random-numbers': {
        responseBody: shared_1.z.array(shared_1.z.number()),
    },
});
//# sourceMappingURL=test-schema.js.map