export declare function createTestClient(): import("../../client").HttpClient<{
    'GET /random-numbers': {
        method: "GET";
        path: "/random-numbers";
        namedParams: never[];
        requestBody: never;
        responseBody: import("zod").ZodArray<import("zod").ZodNumber, "many">;
    };
    'POST /sum': {
        method: "POST";
        path: "/sum";
        namedParams: never[];
        requestBody: import("zod").ZodArray<import("zod").ZodNumber, "many">;
        responseBody: import("zod").ZodUnion<[import("zod").ZodNumber, import("zod").ZodObject<{
            success: import("zod").ZodLiteral<false>;
            code: import("zod").ZodLiteral<"MY_CUSTOM_VALIDATION_ERROR">;
        }, "strip", import("zod").ZodTypeAny, {
            code: "MY_CUSTOM_VALIDATION_ERROR";
            success: false;
        }, {
            code: "MY_CUSTOM_VALIDATION_ERROR";
            success: false;
        }>]>;
    };
    'POST /product': {
        method: "POST";
        path: "/product";
        namedParams: never[];
        requestBody: import("zod").ZodArray<import("zod").ZodNumber, "many">;
        responseBody: import("zod").ZodNumber;
    };
    'GET *': {
        method: "GET";
        path: "*";
        namedParams: "0"[];
        requestBody: import("zod").ZodObject<{
            name: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
        responseBody: import("zod").ZodUnknown;
    };
    'GET /404': {
        method: "GET";
        path: "/404";
        namedParams: never[];
        requestBody: never;
        responseBody: import("zod").ZodObject<{
            error: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            error: string;
        }, {
            error: string;
        }>;
    };
    'PUT /multiply': {
        method: "PUT";
        path: "/multiply";
        namedParams: never[];
        requestBody: import("zod").ZodObject<{
            first: import("zod").ZodNumber;
            second: import("zod").ZodNumber;
        }, "strip", import("zod").ZodTypeAny, {
            second: number;
            first: number;
        }, {
            second: number;
            first: number;
        }>;
        responseBody: import("zod").ZodNumber;
    };
    'POST /sum/negative': {
        method: "POST";
        path: "/sum/negative";
        namedParams: never[];
        requestBody: import("zod").ZodArray<import("zod").ZodNumber, "many">;
        responseBody: import("zod").ZodUnion<[import("zod").ZodNumber, import("zod").ZodObject<{
            success: import("zod").ZodLiteral<false>;
            code: import("zod").ZodLiteral<"MY_CUSTOM_VALIDATION_ERROR">;
        }, "strip", import("zod").ZodTypeAny, {
            code: "MY_CUSTOM_VALIDATION_ERROR";
            success: false;
        }, {
            code: "MY_CUSTOM_VALIDATION_ERROR";
            success: false;
        }>]>;
    };
    'POST /sum/negative-broken': {
        method: "POST";
        path: "/sum/negative-broken";
        namedParams: never[];
        requestBody: import("zod").ZodArray<import("zod").ZodNumber, "many">;
        responseBody: import("zod").ZodNumber;
    };
    'POST /sum/transform-string': {
        method: "POST";
        path: "/sum/transform-string";
        namedParams: never[];
        requestBody: import("zod").ZodArray<import("zod").ZodEffects<import("zod").ZodString, number>, "many">;
        responseBody: import("zod").ZodNumber;
    };
    'POST /sum/transform-response': {
        method: "POST";
        path: "/sum/transform-response";
        namedParams: never[];
        requestBody: import("zod").ZodArray<import("zod").ZodNumber, "many">;
        responseBody: import("zod").ZodEffects<import("zod").ZodNumber, string>;
    };
    'POST /sum/with-query-param': {
        method: "POST";
        path: "/sum/with-query-param";
        namedParams: never[];
        requestBody: import("zod").ZodArray<import("zod").ZodNumber, "many">;
        responseBody: import("zod").ZodNumber;
    };
}>;
