"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// ====================   SHARED   ====================
const __1 = require("../..");
// Declare the http schema to be used by both client and server
const apiSchema = (0, __1.createHttpSchema)({
    'POST /sum': {
        requestBody: __1.z.array(__1.z.number()),
        responseBody: __1.z.number(),
    },
    'GET /greet/:name': {
        responseBody: __1.z.string(),
    },
    'PUT /multiply': {
        requestBody: __1.z.object({
            first: __1.z.number(),
            second: __1.z.number(),
        }),
        responseBody: __1.z.number(),
    },
});
// ====================   CLIENT-SIDE   ====================
const client_1 = require("../../client");
// Create a strongly-typed http client. These are cheap to create - it's fine to have many of them.
const client = (0, client_1.createHttpClient)(apiSchema, { baseURL: '/api' });
// Some valid request examples
let res1 = client.post('/sum', { body: [1, 2] }); // res1: Promise<number>
let res2 = client.get('/greet/:name', { params: { name: 'Bob' } }); // res2: Promise<string>
let res3 = client.put('/multiply', { body: { first: 2, second: 5 } }); // res3: Promise<number>
// Some invalid request examples
//let res4 = client.get('/sum', {body: [1, 2]});                      // tsc build error & runtime error
//let res5 = client.post('/sum', {body: 'foo'});                      // tsc build error & runtime error
//let res6 = client.post('/blah');                                    // tsc build error & runtime error
//let res7 = client.post('/multiply', {body: {first: 2, second: 5}}); // tsc build error & runtime error
// ====================   SERVER-SIDE   ====================
const express = require("express");
const server_1 = require("../../server");
// Create a strongly-typed express router.
const apiRouter = (0, server_1.decorateExpressRouter)({ schema: apiSchema });
// Create a normal express app and mount the strongly-typed router.
const app = express();
app.use(express.json()); // it's a normal express app; mount whatever middleware you want
app.use('/api', apiRouter); // `apiRouter` is just middleware; mount it wherever you want
// Add a request handler directly to the router
apiRouter.post('/sum', (req, res) => {
    let result = req.body.reduce((sum, n) => sum + n, 0);
    res.send(result);
});
// Declare a request handler separately, then add it to the router
const greetHandler = (0, server_1.createRequestHandler)(apiSchema, 'GET /greet/:name', (req, res) => {
    res.send(`Hello, ${req.params.name}!`);
});
apiRouter.get('/greet/:name', greetHandler);
apiRouter.put('/multiply', (req, res) => {
    const { first, second } = req.body;
    const result = first * second;
    res.send(result);
});
// Some invalid route handler examples
//apiRouter.post('/blah', (req, res) => {/*...*/});           // tsc build error & runtime error
//apiRouter.post('/sum', (req, res) => { req.body.foo[0] });  // tsc build error & runtime error
//apiRouter.post('/sum', (req, res) => { res.send('foo') });  // tsc build error & runtime error
app.listen(8000);
//# sourceMappingURL=readme-example.js.map