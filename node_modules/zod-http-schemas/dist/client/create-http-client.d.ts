import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Anonymize, NamedParams, Paths, RequestBody, RequestBodyInput, ResponseBody } from '../util';
import { HttpSchema, Method } from '../shared';
/** Returns a strongly typed object for making requests to a remote HTTP server that implements the given `schema`. */
export declare function createHttpClient<S extends HttpSchema>(schema: S, options?: Partial<HttpClientOptions>): HttpClient<S>;
export declare type HttpClientOptions = AxiosRequestConfig;
/** Strongly typed object for making requests to a remote HTTP server that implements the schema `S`. */
export declare type HttpClient<S extends HttpSchema> = {
    [M in Method as Lowercase<M>]: <P extends Paths<S, M>>(path: P, ...info: HasNamedParamsOrBody<S, M, P> extends false ? [RequestInfo<S, M, P>?] : [RequestInfo<S, M, P>]) => Promise<AxiosResponse<ResponseBody<S, M, P>>>;
};
/** Strongly-typed object used to provide details for a HTTP request to a specific route. */
declare type RequestInfo<S extends HttpSchema, M extends Method, P extends S[keyof S]['path'] = string> = Anonymize<(HasNamedParams<S, M, P> extends true ? {
    params: Record<NamedParams<S, M, P>, string>;
} : {
    params?: Record<string, never>;
}) & // make `params` optional if this route has no named params
(HasBody<S, M, P> extends true ? {
    body: RequestBodyInput<S, M, P>;
} : {
    body?: never;
}) & {
    queryParams?: AxiosRequestConfig['params'];
}>;
/** Helper type that resolves to `true` if the route for the given method/path has defined namedParams. */
declare type HasNamedParams<S extends HttpSchema, M extends Method, P extends S[keyof S]['path']> = NamedParams<S, M, P> extends never ? false : true;
/** Helper type that resolves to `true` if the route for the given method/path has defined requestBody. */
declare type HasBody<S extends HttpSchema, M extends Method, P extends S[keyof S]['path']> = RequestBody<S, M, P> extends undefined ? false : true;
/** Helper type that resolves to `true` if the route for the given method/path has namedParams and/or requestBody. */
declare type HasNamedParamsOrBody<S extends HttpSchema, M extends Method, P extends S[keyof S]['path']> = HasNamedParams<S, M, P> extends true ? true : HasBody<S, M, P>;
export {};
