"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHttpClient = void 0;
const axios_1 = require("axios");
const pathToRegExp = require("path-to-regexp");
/** Returns a strongly typed object for making requests to a remote HTTP server that implements the given `schema`. */
function createHttpClient(schema, options) {
    var _a;
    const axiosClient = axios_1.default.create({
        ...options,
        validateStatus: (_a = options === null || options === void 0 ? void 0 : options.validateStatus) !== null && _a !== void 0 ? _a : ((status) => status < 500),
    });
    return {
        get: (path, info) => request('GET', path, info),
        post: (path, info) => request('POST', path, info),
        put: (path, info) => request('PUT', path, info),
        patch: (path, info) => request('PATCH', path, info),
        delete: (path, info) => request('DELETE', path, info),
    };
    async function request(method, path, info) {
        // Create the actual URL by substituting params (if any) into the path pattern.
        // NB: what axios calls `params` are really queryparams, so different from our `params`,
        // which are part of the path that is pattern-matched by express on the server.
        // NB2: pathToRegExp doesn't handle '*' wildcards like express, so we substitute those manually below.
        let i = 0;
        const url = pathToRegExp
            .compile(path)(info === null || info === void 0 ? void 0 : info.params)
            .replace(/\*/g, () => info === null || info === void 0 ? void 0 : info.params[i++]);
        // here we pick the schema definition from given method & path
        // then we'll parse the response payload
        // this will ensure we have correct types in the Frontend (e.g.: Date instance, not a string of date)
        const responseBodySchema = schema[`${method} ${path}`].responseBody;
        return axiosClient({
            method,
            url,
            data: info === null || info === void 0 ? void 0 : info.body,
            params: info === null || info === void 0 ? void 0 : info.queryParams
        }).then((response) => {
            // if we fail to parse here, mean our API is returning something weird
            // an Exception would be thrown by Zod
            response.data = responseBodySchema.parse(response.data);
            return response;
        });
    }
}
exports.createHttpClient = createHttpClient;
//# sourceMappingURL=create-http-client.js.map